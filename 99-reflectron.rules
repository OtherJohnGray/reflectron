polkit.addRule(function(action, subject) {
    if (action.id == "org.freedesktop.policykit.exec" && subject.isInGroup("reflectron")) {

        var cmd = action.lookup("command_line");
        var tokens = cmd.trim().split(/\s+/);
        
        // Get the full path of binaries
        var debootstrapPath = polkit.spawn(["which", "debootstrap"]).trim();
        var chrootPath = polkit.spawn(["which", "chroot"]).trim();
        var mountPath = polkit.spawn(["which", "mount"]).trim();
        var cpPath = polkit.spawn(["which", "cp"]).trim();
        
        switch(tokens[0]) {
            case debootstrapPath :
                polkit.log("debootstrap"); 
                return debootstrap(tokens.slice(1));
            case chrootPath :
                polkit.log("chroot");
                return chroot(tokens.slice(1));
            case mountPath :
                polkit.log("mount");
                return mount(tokens.slice(1));
            case cpPath :
                polkit.log("cp");
                return copy_sources(tokens.slice(1));
        }
    }
    return polkit.Result.NOT_HANDLED;
});

function debootstrap(tokens) {
    if (tokens.length == 2 &&
        tokens[0].match(/^[a-z]+$/) &&
        tokens[1].startsWith("/opt/reflectron/images/") &&
        tokens[1].substring("/opt/reflectron/images/".length).match(/^[a-zA-Z0-9]+$/)) {
            polkit.log("debootstrap matched");
        return polkit.Result.YES;
    } 
    polkit.log("debootstrap not matched");
    return polkit.Result.NOT_HANDLED;
}

function chroot(tokens) {
    if (tokens.length > 2 &&
        tokens[0].startsWith("/opt/reflectron/images/") &&
        tokens[0].substring("/opt/reflectron/images/".length).match(/^[a-zA-Z0-9]+$/)) {
            polkit.log("chroot path matched");
            if (
                tokens.length == 3 &&
                tokens[1] == "apt" &&
                tokens[2] == "update" 
            ) {
                polkit.log("chroot apt update matched");
                return polkit.Result.YES;
            }
            if (
                tokens.length > 6 &&
                tokens[1] == "env" &&
                tokens[2] == "DEBIAN_FRONTEND=noninteractive" &&
                tokens[3] == "apt-get" &&
                tokens[4] == "install" &&
                tokens[5] == "-y"){
                    polkit.log("apt install");
                    return apt_install(tokens.slice(6));
            }
    }
    return polkit.Result.NOT_HANDLED;
}

function apt_install(tokens) {
    // Debian package name rules from Policy Manual section 5.6.1:
    // - Start with lowercase letter or number
    // - Can contain lowercase letters, numbers, plus (+), minus (-), and dots (.)
    // - Must be at least 2 characters
    // - No hyphens before numbers/letters
    // - No multiple consecutive hyphens
    // - Plus signs only allowed in source package names
    var debianNameRegex = /^[a-z0-9][a-z0-9+.-]+$/;
    
    for (var i = 0; i < tokens.length; i++) {
        var pkg = tokens[i];
        
        // Basic pattern match
        if (!debianNameRegex.test(pkg)) {
            polkit.log("apt install matched");
            return polkit.Result.NO;
        }

        // Additional rules:
        if (pkg.length < 2 ||                  // Must be at least 2 chars
            pkg.includes('--') ||              // No consecutive hyphens
            pkg.endsWith('-') ||               // Can't end in hyphen
            pkg.endsWith('.') ||               // Can't end in dot
            pkg.includes('.-') ||              // No dot-hyphen
            pkg.includes('-.')) {              // No hyphen-dot
            polkit.log("apt install failed");
            return polkit.Result.NO;
        }
    }
    polkit.log("apt install matched");
    return polkit.Result.YES;    
}

//"mount", "-t", "proc", "proc",  &format!("{}/proc",    &image_path)
//"mount", "-t", "sysfs", "sys",  &format!("{}/sys",     &image_path)
//"mount", "-B", "/dev",          &format!("{}/dev",     &image_path)
//"mount", "-t", "devpts", "pts", &format!("{}/dev/pts", &image_path)

function mount(tokens) {
    switch (tokens[0]) {
        case "-t" :
            polkit.log("mount_type");
            return mount_type(tokens.slice(1));
        case "-B" :
            polkit.log("mount_bind");
            return mount_bind(tokens.slice(1));
    }
    polkit.log("mount failed");
    return polkit.Result.NOT_HANDLED;
}

function mount_type(tokens){
    if (tokens.length == 3){polkit.log("tokens length is 3")}
    if (tokens[0] == "proc"){polkit.log("tokens[0] == proc")}
    if (tokens[1] == "proc"){polkit.log("tokens[1] == proc")}
    if (tokens[2].match(/^\/opt\/reflectron\/images\/[a-zA-Z0-9-_\.]+\/proc$/)){polkit.log("tokens[2].match(/^\/opt\/reflectron\/images\/[a-zA-Z0-9-_\.]+\/proc$/)")}
    if (
        tokens.length == 3 && (
            // proc proc /opt/reflectron/images/debian12/proc
            tokens[0] == "proc" && tokens[1] == "proc" && tokens[2].match(/^\/opt\/reflectron\/images\/[a-zA-Z0-9-_\.]+\/proc$/) ||
            tokens[0] == "sysfs" && tokens[1] == "sys" && tokens[2].match(/^\/opt\/reflectron\/images\/[a-zA-Z0-9-_\.]+\/sys$/) ||
            tokens[0] == "devpts" && tokens[1] == "pts" && tokens[2].match(/^\/opt\/reflectron\/images\/[a-zA-Z0-9-_\.]+\/dev\/pts$/) 
        )
    ){
        polkit.log("mount_type matched");
        return polkit.Result.YES;
    }
    polkit.log("mount_type failed");
    return polkit.Result.NOT_HANDLED;
}

function mount_bind(tokens){
    if (
        tokens.length ==2 &&
        tokens[0] == "/dev" &&
        tokens[1].match(/^\/opt\/reflectron\/images\/[a-zA-Z0-9-_\.]+\/dev$/)
    ){
        polkit.log("mount_bind matched");
        return polkit.Result.YES;
    }
    polkit.log("mount_bind failed");
    return polkit.Result.NOT_HANDLED;
}

// pkexec cp /tmp/reflectron-fiu6rj /opt/reflectron/images/debian12/etc/apt/sources.list
function copy_sources(tokens){
    if (
        tokens.length == 2 &&
        /^\/tmp\/reflectron-[0-9a-zA-Z]+$/.test(tokens[0]) &&
        /^\/opt\/reflectron\/images\/[a-zA-Z0-9\-_\.]+\/etc\/apt\/sources\.list$/.test(tokens[1])
    ) {
        polkit.log("copy_sources matched");
        return polkit.Result.YES;
    }
    polkit.log("copy_sources failed");
    return polkit.Result.NOT_HANDLED;
}


