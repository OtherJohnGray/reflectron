polkit.addRule(function(action, subject) {
    if (action.id == "org.freedesktop.policykit.exec" && subject.isInGroup("reflectron")) {

        var cmd = action.lookup("command_line");
        var tokens = cmd.trim().split(/\s+/);
        
        // Get the full path of binaries
        var debootstrapPath = polkit.spawn(["which", "debootstrap"]).trim();
        var envPath = polkit.spawn(["which", "env"]).trim();
        var chrootPath = polkit.spawn(["which", "chroot"]).trim();
        var mountPath = polkit.spawn(["which", "mount"]).trim();
        var cpPath = polkit.spawn(["which", "cp"]).trim();
        var zfsPath = polkit.spawn(["which", "zfs"]).trim();
        
        switch(tokens[0]) {
            case debootstrapPath :
                polkit.log("debootstrap"); 
                return debootstrap(tokens.slice(1));
            case envPath :
                if (
                    tokens[1] == "-i" &&
                    tokens[2] == chrootPath
                ) {
                    polkit.log("chroot");
                    return chroot(tokens.slice(3));
                } else {    
                    polkit.log("env not '-i chroot' - failed.");
                    return polkit.Result.NOT_HANDLED;
                }
            case mountPath :
                polkit.log("mount");
                return mount(tokens.slice(1));
            case cpPath :
                polkit.log("cp");
                return copy_config(tokens.slice(1));
            case zfsPath :
                polkit.log("zfs");
                return zfs(tokens.slice(1));
        }
    }
    return polkit.Result.NOT_HANDLED;
});

function debootstrap(tokens) {
    if (tokens.length == 2 &&
        tokens[0].match(/^[a-z]+$/) &&
        tokens[1].startsWith("/opt/reflectron/images/") &&
        tokens[1].substring("/opt/reflectron/images/".length).match(/^[a-zA-Z0-9]+$/)) {
            polkit.log("debootstrap matched");
        return polkit.Result.YES;
    } 
    polkit.log("debootstrap not matched");
    return polkit.Result.NOT_HANDLED;
}

function chroot(tokens) {
    if (tokens.length > 1 &&
        tokens[0].startsWith("/opt/reflectron/images/") &&
        tokens[0].substring("/opt/reflectron/images/".length).match(/^[a-zA-Z0-9]+$/)) {
            polkit.log("chroot path matched");
            if (
                tokens.length == 3 &&
                tokens[1] == polkit.spawn(["which", "apt"]).trim() &&
                tokens[2] == "update"){
                    polkit.log("chroot apt update matched");
                    return polkit.Result.YES;
            }
            if (
                tokens.length > 3 &&
                tokens[1] == polkit.spawn(["which", "bash"]).trim() &&
                tokens[2] ==  "-c"){
                    polkit.log("bash");
                    return bash(tokens.slice(3));
            }
            if (
                tokens.length == 2 &&
                tokens[1] == polkit.spawn(["which", "locale-gen"]).trim()){
                    polkit.log("locale-gen matched");
                    return polkit.Result.YES;
            }
            if (
                tokens.length == 4 &&
                tokens[1] == polkit.spawn(["which", "update-locale"]).trim() &&
                tokens[2] == "LANG=en_US.UTF-8" &&
                tokens[3] == "LC_ALL=en_US.UTF-8"){
                    polkit.log("update-locale matched");
                    return polkit.Result.YES;
            }
            if (
                tokens.length > 6 &&
                tokens[1] == polkit.spawn(["which", "env"]).trim() &&
                tokens[2] == "DEBIAN_FRONTEND=noninteractive" &&
                tokens[3] == polkit.spawn(["which", "apt-get"]).trim() &&
                tokens[4] == "install" &&
                tokens[5] == "-y"){
                    if (
                        tokens.length > 8 &&
                        tokens[6] == "-t" &&
                        tokens[7] == "bookworm-backports"){
                            polkit.log("apt install backports");
                            return apt_install(tokens.slice(8));
                        } else {
                            polkit.log("apt install");
                            return apt_install(tokens.slice(6));
                        }
            }
            if (
                tokens.length > 3 &&
                tokens[1] == polkit.spawn(["which", "systemctl"]).trim() &&
                tokens[2] == "enable"){
                    polkit.log("systemctl enable");
                    return systemctl_enable(tokens.slice(3));
            }
    }
    polkit.log("chroot failed for " + tokens.join(" ")); 
    return polkit.Result.NOT_HANDLED;
}

function apt_install(tokens) {
    // Debian package name rules from Policy Manual section 5.6.1:
    // - Start with lowercase letter or number
    // - Can contain lowercase letters, numbers, plus (+), minus (-), and dots (.)
    // - Must be at least 2 characters
    // - No hyphens before numbers/letters
    // - No multiple consecutive hyphens
    // - Plus signs only allowed in source package names
    var debianNameRegex = /^[a-z0-9][a-z0-9+.-]+$/;
    
    for (var i = 0; i < tokens.length; i++) {
        var pkg = tokens[i];
        
        // Basic pattern match
        if (!debianNameRegex.test(pkg)) {
            polkit.log("apt install matched");
            return polkit.Result.NOT_HANDLED;
        }

        // Additional rules:
        if (pkg.length < 2 ||                  // Must be at least 2 chars
            pkg.includes('--') ||              // No consecutive hyphens
            pkg.endsWith('-') ||               // Can't end in hyphen
            pkg.endsWith('.') ||               // Can't end in dot
            pkg.includes('.-') ||              // No dot-hyphen
            pkg.includes('-.')) {              // No hyphen-dot
            polkit.log("apt install failed");
            return polkit.Result.NOT_HANDLED;
        }
    }
    polkit.log("apt install matched");
    return polkit.Result.YES;    
}

function mount(tokens) {
    switch (tokens[0]) {
        case "-t" :
            polkit.log("mount_type");
            return mount_type(tokens.slice(1));
        case "-B" :
            polkit.log("mount_bind");
            return mount_bind(tokens.slice(1));
    }
    polkit.log("mount failed");
    return polkit.Result.NOT_HANDLED;
}

function mount_type(tokens){
    if (tokens.length == 3){polkit.log("tokens length is 3")}
    if (tokens[0] == "proc"){polkit.log("tokens[0] == proc")}
    if (tokens[1] == "proc"){polkit.log("tokens[1] == proc")}
    if (tokens[2].match(/^\/opt\/reflectron\/images\/[a-zA-Z0-9-_\.]+\/proc$/)){polkit.log("tokens[2].match(/^\/opt\/reflectron\/images\/[a-zA-Z0-9-_\.]+\/proc$/)")}
    if (
        tokens.length == 3 && (
            // proc proc /opt/reflectron/images/debian12/proc
            tokens[0] == "proc" && tokens[1] == "proc" && tokens[2].match(/^\/opt\/reflectron\/images\/[a-zA-Z0-9-_\.]+\/proc$/) ||
            tokens[0] == "sysfs" && tokens[1] == "sys" && tokens[2].match(/^\/opt\/reflectron\/images\/[a-zA-Z0-9-_\.]+\/sys$/) ||
            tokens[0] == "devpts" && tokens[1] == "pts" && tokens[2].match(/^\/opt\/reflectron\/images\/[a-zA-Z0-9-_\.]+\/dev\/pts$/) 
        )
    ){
        polkit.log("mount_type matched");
        return polkit.Result.YES;
    }
    polkit.log("mount_type failed");
    return polkit.Result.NOT_HANDLED;
}

function mount_bind(tokens){
    if (
        tokens.length ==2 &&
        tokens[0] == "/dev" &&
        tokens[1].match(/^\/opt\/reflectron\/images\/[a-zA-Z0-9-_\.]+\/dev$/)
    ){
        polkit.log("mount_bind matched");
        return polkit.Result.YES;
    }
    polkit.log("mount_bind failed");
    return polkit.Result.NOT_HANDLED;
}

// /usr/bin/cp -R /home/johngray/workspace/practice/reflectron/files/debian12/* /opt/reflectron/images/debian12/
function copy_config(tokens){
    if (
        tokens.length == 3 &&
        tokens[0] == "-R" &&
        /files\/debian12\/etc$/.test(tokens[1]) &&
        /^\/opt\/reflectron\/images\/[a-zA-Z0-9\-_\.]+\/$/.test(tokens[2])
    ) {
        polkit.log("copy_config matched");
        return polkit.Result.YES;
    }
    polkit.log("copy_config failed");
    return polkit.Result.NOT_HANDLED;
}

function bash(tokens){
    if ( tokens[0] == polkit.spawn(["which", "echo"]).trim() &&
         tokens[1] == "'en_US.UTF-8" &&
         tokens[2] == "UTF-8'" &&
         tokens[3] == ">" &&
         tokens[4] == "/etc/locale.gen" ){
             polkit.log("bash locale.gen matched");
             return polkit.Result.YES
    }

    polkit.log("bash failed");
    return polkit.Result.NOT_HANDLED;
}

function systemctl_enable(tokens) {
    if (
        tokens.length == 1 &&
        (
            tokens[0] == "zfs.target" ||
            tokens[0] == "zfs-import-cache" ||
            tokens[0] == "zfs-mount" ||
            tokens[0] == "zfs-import.target" 
        )
    ){
            polkit.log("sytemctl enable " + tokens[0] + " matched");
            return polkit.Result.YES;
    } else {
        return polkit.Result.NOT_HANDLED;
    }
}

function zfs(tokens) {
    if (
        tokens.length == 2 &&
        tokens[0] == "list" &&
        /^([a-zA-Z0-9\-_\.]\/?)+$/.test(tokens[1])
    ) {
            polkit.log("zfs list " + tokens[1] + " matched");
            return polkit.Result.YES;
    } else if (
        tokens.length == 7 &&
        tokens[0] == "create" &&
        tokens[1] == "-sp" &&
        tokens[2] == "-b" &&
        tokens[3] == "64K" &&
        tokens[4] == "-V" &&
        /^[0-9]+$/.test(tokens[5]) &&
        /^([a-zA-Z0-9\-_\.]\/?)+$/.test(tokens[6])
    ) {
            polkit.log("zfs create -sp -b 4K -V " + tokens[5] + " " + tokens[6] + " matched");
            return polkit.Result.YES;
} else {
        return polkit.Result.NOT_HANDLED;
    }
}
